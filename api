
if(!localStorage.version || localStorage.version!="1.0.1.4" )
{
	localStorage.version = "1.0.1.4"
	 var opt = {
        type: "basic",
        title: "zoomWheel Extension",
        message: "Thank you very much for your patience in such a long time. Just want to say that zoomWheel has come back to Chrome and now I am making a big update for it. \n\tSorry if this message bothered you. Have a nice day :) !",
        iconUrl: chrome.extension.getURL("images/zoom.png"),
      }

   // chrome.notifications.create("update_notify", opt, function(){});    
 }
 
	function init()
	{
		
		localStorage.defaultZoom = (localStorage.defaultZoom==undefined)? 100:localStorage.defaultZoom;
		localStorage.maxZoom = (localStorage.maxZoom==undefined)? 350:localStorage.maxZoom;
		localStorage.minZoom = (localStorage.minZoom==undefined)? 40:localStorage.minZoom;
		localStorage.AAOnZoom = (localStorage.AAOnZoom==undefined)? 160:localStorage.AAOnZoom;
		localStorage.adjustHeight = (localStorage.adjustHeight==undefined)? false:localStorage.adjustHeight;
		localStorage.zoomStep = (localStorage.zoomStep==undefined)? 15:localStorage.zoomStep;
		localStorage.showIcon = (localStorage.showIcon==undefined)? true:localStorage.showIcon;
		localStorage.defaultSave = (localStorage.defaultSave==undefined)? null:localStorage.defaultSave;
		localStorage.zoomURLData = (localStorage.zoomURLData==undefined)?JSON.stringify({}):localStorage.zoomURLData;
		localStorage.zoomDomainData = (localStorage.zoomDomainData==undefined)?JSON.stringify({}):localStorage.zoomDomainData;
		//localStorage.zoomStringData = (localStorage.zoomStringData==undefined)? JSON.stringify([]):localStorage.zoomStringData;
	}
	
	
	
	function encode(input) 
		{			return  input.replace(/\W/gi,"")+""		}	
	
	
	function savedZoom(domain,url)
	{

		init()
		
			zoomDomain = JSON.parse(localStorage.zoomDomainData)
			z =   zoomDomain[encode(domain)]
			//eval("z = zoomDomain['" + encode(domain)+"']") ;
			if(z!=undefined) return ({zoomRatio:z,type:"domain"})  ;

		else 
		{
			zoomURL = JSON.parse(localStorage.zoomURLData)  ;
			z = 	zoomURL[encode(url)]
			if(z!=undefined)  return ({zoomRatio:z,type:"URL"})  ;
			else return ({zoomRatio:null,type:null})  ;
		}
		
		
	}
	
	function Settings()
	{
		return	({
			defaultZoom:localStorage.defaultZoom,
			maxZoom:localStorage.maxZoom ,
			adjustHeight:localStorage.adjustHeight ,
			minZoom:localStorage.minZoom,
			AAOnZoom:localStorage.AAOnZoom,
			zoomStep:localStorage.zoomStep,
			showIcon:localStorage.showIcon,
			defaultSave:localStorage.defaultSave
		})
	}
	
	function callUpdate()
	{
	chrome.windows.getAll({populate:true}, function (wins){
		
		for (k = 0; k < wins.length; k++) {
			for (i = 0; i < wins[k].tabs.length; i++) {
			
				chrome.tabs.sendMessage(wins[k].tabs[i].id, {
					msg: "updateUrSettings"
				});
			}
			
		}
		
	})
		chrome.tabs.getAllInWindow(null, function(tabs)
		{
			for (i = 0; i < tabs.length; i++) 
			{
				chrome.tabs.sendMessage(tabs[i].id, {
					msg: "updateUrSettings"
				});

			}
			
		})

		
		
	}
chrome.runtime.onMessage.addListener(
  function(request, sender, sendResponse)
  {
  	
  	var port = chrome.tabs.connect(sender.tab.id, {name: "zoomWithMe"})
	
	
		if(request.msg == "getSettings")
	{
		sendResponse(Settings());
	}
				
	if(request.msg == "getSavedZoom")
	{
	
		sendResponse(savedZoom(request.domain,request.url))
	}
	
	
	if(request.msg=="wheelZoom")
	{
		
		sendResponse({msg:"wheelZoom",sender:request.sender,data: request.data,step:request.Step,max:350,min:40,new_zoom:request.new_zoom});
	}
	
	if(request.msg=="changeZoomLabel")
	{
		sendResponse({msg:"changeZoomLabel",newZoom:request.newZoom});
	}
	if(request.msg=="resetZoom")
	{
		sendResponse({msg:"resetZoom",sender:request.sender});
	}
	
	if(request.msg=="showIcon")
	{
		sendResponse({msg:"showIcon",sender:request.sender});
	}
	
	if(request.msg =="changeHiding")
	{
		sendResponse({msg:"changeHiding",newValue:request.newValue});
	}
	
	if(request.msg =="saveZoom")
	{
		saveZoom(request.type,{url:request.url,domain:request.domain},request.ratio)
	}
	
			
	if (request.msg == "deleteZoom") 
	{

		deleteZoom(request.type,request.value)
	}
  });


function saveZoom(type,value,ratio)
{
	init();
	
	if(type =="domain") 
		{
		
			zoomDomain = JSON.parse(localStorage.zoomDomainData)
			zoomDomain[encode(value.domain)] = ratio;
			localStorage.zoomDomainData = JSON.stringify(zoomDomain)
		}
	
	
		if(type =="URL") 
		{
		
			zoomURL = JSON.parse(localStorage.zoomURLData)
			zoomURL[encode(value.url)] = ratio;
			localStorage.zoomURLData =  JSON.stringify(zoomURL)

			
	
		}
		
		/*
		if(request.type =="customString") 
		{
			zoomString = JSON.parse(localStorage.zoomStringData)
			zoomString.push(JSON.stringify({value:request.string,ratio:request.ratio}))
			localStorage.zoomStringData = JSON.stringify(zoomString)
		}
		*/
	
}


function deleteZoom(type, value)
{
		init()
		if (type == "URL") 
		{
			zoomURL = JSON.parse(localStorage.zoomURLData)  ;
			zoomURL[encode(value)] = undefined  ;
			localStorage.zoomURLData = JSON.stringify(zoomURL)  ;
		}
		if (type == "domain") 
		{
			zoomDomain = JSON.parse(localStorage.zoomDomainData)  ;
			zoomDomain[encode(value)] = undefined ;
			localStorage.zoomDomainData = JSON.stringify(zoomDomain)   ;
		}
	
}


	
	chrome.browserAction.onClicked.addListener( function(tab){
  openOptions()
    } );
		
		
			
function openOptions()

{
	
}

init();


